/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 ./jetmodel2.glb 
*/

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { proxy, useSnapshot } from 'valtio'

 const state = proxy({
    current: null, 
    items: {
        HydraDecals : "#ffffff",
        HydraSteaks : "#ffffff",
        HydraHull : "#ffffff",
        HydraHullDark : "#ffffff",
        HydraAntiCollisionLight1 : "#ffffff",
        HydraAntiCollisionLight2 : "#ffffff",
        HydraRockets : "#ffffff",
        HydraInterior : "#ffffff",
        HydraInteriorRed : "#ffffff",
        HydraControlPanel : "#ffffff",
        HydraWheels : "#FF0000",
        HydraCanopyGlass : "#ffffff",
        HydraMechanics : "#ffffff",
        HydraJetBlades : "#ffffff",
    }
})
 function Picker() {
    const snap = useSnapshot(state)
    console.log("im from model", snap.current)
    return (
      <div style={{ display: snap.current ? "block" : "none" }}>
        {/* <HexColorPicker className="picker" color={snap.items[snap.current]} onChange={(color) => (state.items[snap.current] = color)} /> */}
        <h1>{snap.current}</h1>
      </div>
    )
  }

  function Model(props) {
    const group = useRef()
    const snap = useSnapshot(state)
    const [hovered, setHovered] = useState(null)
  const { nodes, materials } = useGLTF('/jetmodel2.glb')
  return (
    <group ref={group} {...props} dispose={null}
    onPointerOver={(e) => {
        e.stopPropagation()
        setHovered(e.object.material.name)
        console.log(hovered);
    }}
    // onPointerOut={(e) => {
    //    e.intersections.length === 0 && setHovered(null)
    // }}

    // onPointerDown={(e) => {
    //     e.stopPropagation()
    //     state.current = e.object.material.name
    // }}

    // onPointerMissed={(e)=> {
    //     state.current = null
    // }}
    >
      <mesh material-color={snap.items.HydraDecals} geometry={nodes.HydraDecals.geometry} material={materials.HydraDecals} />
      <mesh material-color={snap.items.HydraSteaks} geometry={nodes.HydraSteaks.geometry} material={materials.HydraSteaks} />
      <mesh material-color={snap.items.HydraHull} geometry={nodes.HydraAntiCollisionLights001.geometry} material={materials.HydraHull} />
      <mesh material-color={snap.items.HydraHullDark} geometry={nodes.HydraAntiCollisionLights001_1.geometry} material={materials.HydraHullDark} />
      <mesh material-color={snap.items.HydraAntiCollisionLight1} geometry={nodes.HydraAntiCollisionLights001_2.geometry} material={materials.HydraAntiCollisionLight1} />
      <mesh material-color={snap.items.HydraAntiCollisionLight2} geometry={nodes.HydraAntiCollisionLights001_3.geometry} material={materials.HydraAntiCollisionLight2} />
      <mesh material-color={snap.items.HydraHull} geometry={nodes.Hydra001.geometry} material={materials.HydraHull} />
      <mesh material-color={snap.items.HydraHullDark} geometry={nodes.Hydra001_1.geometry} material={materials.HydraHullDark} />
      <mesh material-color={snap.items.HydraRockets} geometry={nodes.Hydra001_2.geometry} material={materials.HydraRockets} />
      <mesh material-color={snap.items.HydraInterior} geometry={nodes.Hydra001_3.geometry} material={materials.HydraInterior} />
      <mesh material-color={snap.items.HydraInteriorRed} geometry={nodes.Hydra001_4.geometry} material={materials.HydraInteriorRed} />
      <mesh material-color={snap.items.HydraControlPanel} geometry={nodes.Hydra001_5.geometry} material={materials.HydraControlPanel} />
      <mesh material-color={snap.items.HydraWheels} geometry={nodes.Hydra001_6.geometry} material={materials.HydraWheels} />
      <mesh material-color={snap.items.HydraCanopyGlass} geometry={nodes.Hydra001_7.geometry} material={materials.HydraCanopyGlass} />
      <mesh material-color={snap.items.HydraMechanics} geometry={nodes.Hydra001_8.geometry} material={materials.HydraMechanics} />
      <mesh material-color={snap.items.HydraJetBlades} geometry={nodes.Hydra001_9.geometry} material={materials.HydraJetBlades} />
    </group>
  )
}


useGLTF.preload('/jetmodel2.glb')

export {Model, Picker, state };


